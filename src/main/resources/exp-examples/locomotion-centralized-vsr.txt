ea.experiment(
  runs = (randomGenerator = (seed = [1:1:3]) * [m.defaultRG()]) * [
    ea.run(
      solver = ea.s.ga(
        representation = ea.r.doubleString();
        mapper = er.m.dsToNpHomoBrains(target = s.a.centralizedNumGridVSR(
          body = s.a.vsr.gridBody(
            sensorizingFunction = s.a.vsr.sf.directional(
              headSensors = [s.s.sin(f = 0); s.s.d(a = -15; r = 5)];
              nSensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90)];
              sSensors = [s.s.d(a = -90)]
            );
            shape = s.a.vsr.s.biped(w = 4; h = 3)
          );
          function = ds.num.mlp()
        ));
        nEval = 1000;
        nPop = 25
      );
      problem = ea.p.simTo(
        simulation = s.task.locomotion(duration = 15);
        f = s.f.outcome.faXVelocity();
        type = maximize
      )
    )
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.f.size(of = ea.f.genotype(of = ea.f.best()); format = "%3d");
        s.f.outcome.faXVelocity(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())); format = "%6.4f");
        ea.f.hist(of = f.each(of = ea.f.all(); mapF = s.f.outcome.faXVelocity(of = ea.f.simOutcome(of = ea.f.quality()))));
        f.percentile(of = f.each(of = ea.f.all(); mapF = s.f.outcome.faXVelocity(of = ea.f.simOutcome(of = ea.f.quality()))); p = 75; format = "%6.4f")
      ];
      runKeys = [
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ]
    );
    ea.l.expPlotSaver(
      filePath = "../centralized-vsr.png";
      w = 600; h = 600;
      type = lines;
      plot = ea.plot.xyPlotMatrix(
        xFunction = f.quantized(of = ea.f.nOfEvals(); q = 250);
        yFunction = s.f.outcome.faXVelocity(of = ea.f.simOutcome(of = ea.f.quality(of = ea.f.best())))
      )
    );
    ea.l.runLastIterationVideoSaver(
      video = s.taskVideoBuilder(task = s.task.locomotion(duration = 15));
      function = ea.f.solution(of = ea.f.best());
      filePathTemplate = "../finalBest-{problem.name}-{solver.name}-{randomGenerator.seed:%04d}.mp4";
      condition = ea.predicate.all(conditions = [
        ea.predicate.inS(
          f = ea.f.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"]
        )
      ])
    )
  ]
)