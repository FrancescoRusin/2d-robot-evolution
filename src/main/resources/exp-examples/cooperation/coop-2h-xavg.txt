ea.experiment(
    name = "coop-2h-xavg";
    runs = (randomGenerator = (seed = [-10:1:-1]) * [m.defaultRG()]) *
        (
            problem = (
                qFunction = (task = (shape = (s = ["ssssssssss"; "ssssssss"; "ssssss"; "ssss"]) *
                    [s.a.vsr.shape.free()]) *
                    [s.task.prebuiltIndependentLocomotion(terrain = s.terrain.holed(startW = 20; holeWs = [2.05]))]
                    ) * [s.taskRunner()]
                ) * [ea.p.totalOrder(
                name = "holed_loc";
                cFunction = s.f.outcome.aaFinalAvgW();
                type = maximize
            )]
        ) * (
            solver = [ea.s.cmaEs(
                mapper = er.m.dsToNpHomoBrains(
                    target = s.a.numIndependentVoxel(
                        sensors = [
                            s.sensors.sin(); s.sensors.a(); s.sensors.ar(); s.sensors.rv(a = 0); s.sensors.rv(a = 90);
                            s.sensors.sc(s = N); s.sensors.sc(s = E); s.sensors.sc(s = S); s.sensors.sc(s = W);
                            s.sensors.sa(s = N); s.sensors.sa(s = E); s.sensors.sa(s = S); s.sensors.sa(s = W);
                            s.sensors.c(); s.sensors.d(a = 0; r = 5)
                        ];
                        nOfNFCChannels = 1;
                        function = ds.num.stepped(
                            stepT = 0.1;
                            inner = ds.num.mlp(
                                nOfInnerLayers = 3
                            )
                        )
                    )
                );
                nEval = 10000
            )]
        ) * [ea.run()];
    listeners = [
        ea.l.bestCsv(
            path = "./Csv/{name}_bests.csv";
            defaultFunctions = [
                ea.f.nOfIterations();
                ea.f.nOfEvals();
                ea.f.elapsedSecs()
            ];
            functions = [
                s.f.outcome.aaFinalAvgW(of = ea.f.quality(of = ea.f.best()));
                s.f.outcome.aaFinalMinW(of = ea.f.quality(of = ea.f.best()));
                s.f.outcome.aaFinalMaxW(of = ea.f.quality(of = ea.f.best()));
                f.toBase64(of = ea.function.genotype(of = ea.f.best()))
            ];
            deferred = true;
            onlyLast = false
        );
        ea.l.onExpDone(
            of = ea.plot.multi.xy(
                xSubplot = ea.f.runString(s = "_");
                ySubplot = ea.f.runString(s = "_");
                x = f.quantized(of = ea.f.nOfEvals(); q = 1000);
                y = s.f.outcome.aaFinalAvgW(of = ea.f.quality(of = ea.f.best()));
                line = ea.f.runString(s = "{run.problem.qFunction.task.shape.s}")
            );
            consumers = [
                ea.c.saver(
                    path = "./Drawings/{name}-fitness-graph";
                    of = ea.f.imagePlotter()
                );
                ea.c.saver(
                    path = "./Drawings/{name}-fitness-graph";
                    of = ea.f.csvPlotter()
                )
            ]
        );
        ea.l.onExpDone(
            of = ea.plot.multi.yBoxplot(
                xSubplot = ea.f.runString(s = "_");
                ySubplot = ea.f.runString(s = "_");
                y = s.f.outcome.aaFinalAvgW(of = ea.f.quality(of = ea.f.best()));
                box = ea.f.runString(s = "{run.problem.qFunction.task.shape.s}");
                predicateValue = ea.f.rate(of = ea.f.progress());
                condition = predicate.gtEq(t = 1)
            );
            consumers = [
                ea.c.saver(
                    path = "./Drawings/{name}-fitness-box";
                    of = ea.f.imagePlotter()
                );
                ea.c.saver(
                    path = "./Drawings/{name}-fitness-box";
                    of = ea.f.csvPlotter()
                )
            ]
        )
    ]
)